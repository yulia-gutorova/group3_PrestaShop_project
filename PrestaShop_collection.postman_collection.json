{
	"info": {
		"_postman_id": "8b5acd0c-0131-49e2-a012-fe9bfbd35d12",
		"name": "PrestaShop_collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create a new user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\">>>>> Create a new user\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"//************************************************* \r",
							"//response status testing \r",
							"//************************************************* \r",
							"\r",
							"pm.test (\">>> Status code is 201\", function()\r",
							"    {\r",
							"    pm.response.to.have.status(201);\r",
							"    });\r",
							"\r",
							"pm.test (\">>> Status code name has string 'Created'\", function()\r",
							"    {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"    });\r",
							"\r",
							"pm.test (\">>> Response is in json format\", function()\r",
							"    {\r",
							"    pm.response.to.be.json;\r",
							"    });\r",
							"\r",
							"pm.test (\">>> Response time is less than 600\", function()\r",
							"    {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"    });\r",
							"//************************************************* \r",
							"//response body testing\r",
							"//************************************************* \r",
							"pm.test (\">>> Response is not empty\", function()\r",
							"    {\r",
							"    pm.expect(jsonData).to.be.not.empty;\r",
							"    });\r",
							"\r",
							"pm.test (\">>> Response has type object\", function()\r",
							"    {\r",
							"        pm.expect(jsonData).to.be.a(\"object\")\r",
							"    });\r",
							"\r",
							"pm.test(\">>> Response must have properties\", () => {\r",
							"  pm.expect(jsonData.customer).to.have.property('id');\r",
							"  pm.expect(jsonData.customer).to.have.property('lastname');\r",
							"  pm.expect(jsonData.customer).to.have.property('firstname');\r",
							"  pm.expect(jsonData.customer).to.have.property('email');\r",
							"});\r",
							"\r",
							"pm.test (\">>> User verification\", function()\r",
							"    {\r",
							"        pm.expect(jsonData.customer.firstname).to.eql(\"TestUserFirstName\"),\r",
							"        pm.expect(jsonData.customer.lastname).to.eql(\"TestUserLastName\"),\r",
							"        pm.expect(jsonData.customer.email).to.eql(\"testuser@mail\")\r",
							"    }); \r",
							"     \r",
							"//************************************************* \r",
							"//set collection variables\r",
							"//*************************************************\r",
							"var customer_id= jsonData.customer.id;\r",
							"pm.collectionVariables.set(\"cust_id\", customer_id);\r",
							"console.log(\">>>>>Customer id: \" + customer_id);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\r\n  <customer>\r\n    <passwd><![CDATA[TestUserPassword]]></passwd>\r\n    <lastname><![CDATA[TestUserLastName]]></lastname>\r\n    <firstname><![CDATA[TestUserFirstName]]></firstname>\r\n    <email><![CDATA[testuser@mail]]></email>\r\n  </customer>\r\n</prestashop>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "http://104.209.254.152/api/customers/?ws_key=EMLX2FKDSD1C7V6UDXVBMEWBCAK7U6WK&output_format=JSON",
					"protocol": "http",
					"host": [
						"104",
						"209",
						"254",
						"152"
					],
					"path": [
						"api",
						"customers",
						""
					],
					"query": [
						{
							"key": "ws_key",
							"value": "EMLX2FKDSD1C7V6UDXVBMEWBCAK7U6WK"
						},
						{
							"key": "output_format",
							"value": "JSON"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an existing user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\">>>>> Update a user\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"//************************************************* \r",
							"//response status testing \r",
							"//************************************************* \r",
							"\r",
							"pm.test (\">>> Status code is 200\", function()\r",
							"    {\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"pm.test (\">>> Status code name has string 'OK'\", function()\r",
							"    {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"    });\r",
							"\r",
							"pm.test (\">>> Response is in json format\", function()\r",
							"    {\r",
							"    pm.response.to.be.json;\r",
							"    });\r",
							"\r",
							"pm.test (\">>> Response time is less than 600\", function()\r",
							"    {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"    });\r",
							"//************************************************* \r",
							"//response body testing\r",
							"//************************************************* \r",
							"pm.test (\">>> Response is not empty\", function()\r",
							"    {\r",
							"    pm.expect(jsonData).to.be.not.empty;\r",
							"    });\r",
							"\r",
							"pm.test (\">>> Response has type object\", function()\r",
							"    {\r",
							"        pm.expect(jsonData).to.be.a(\"object\")\r",
							"    });\r",
							"\r",
							" pm.test (\">>> Updating user verification\", function()\r",
							"    {\r",
							"        pm.expect(jsonData.customer.id).to.eql(pm.collectionVariables.get(\"cust_id\")),\r",
							"        pm.expect(jsonData.customer.lastname).to.eql(\"Potter\"),\r",
							"        pm.expect(jsonData.customer.firstname).to.eql(\"Harry\"),\r",
							"        pm.expect(jsonData.customer.email).to.eql(\"harry@potter\")\r",
							"    }); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\r\n  <customer>\r\n    <id><![CDATA[{{cust_id}}]]></id>\r\n    <passwd><![CDATA[Harry]]></passwd>\r\n    <lastname><![CDATA[Potter]]></lastname>\r\n    <firstname><![CDATA[Harry]]></firstname>\r\n    <email><![CDATA[harry@potter]]></email>\r\n  </customer>\r\n</prestashop>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "http://104.209.254.152/api/customers/?ws_key=EMLX2FKDSD1C7V6UDXVBMEWBCAK7U6WK&output_format=JSON&cust_id={{cust_id}}",
					"protocol": "http",
					"host": [
						"104",
						"209",
						"254",
						"152"
					],
					"path": [
						"api",
						"customers",
						""
					],
					"query": [
						{
							"key": "ws_key",
							"value": "EMLX2FKDSD1C7V6UDXVBMEWBCAK7U6WK"
						},
						{
							"key": "output_format",
							"value": "JSON"
						},
						{
							"key": "cust_id",
							"value": "{{cust_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user with particular ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"//************************************************* \r",
							"//response status testing \r",
							"//************************************************* \r",
							"\r",
							"pm.test (\">>> Status code is 200\", function()\r",
							"    {\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"pm.test (\">>> Status code name has string 'OK'\", function()\r",
							"    {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"    });\r",
							"pm.test (\">>> Response time is less than 600\", function()\r",
							"    {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"    });\r",
							"pm.test (\">>> Response headers contain 'Content-Length' header\", function()\r",
							"    {\r",
							"    pm.expect(pm.response).to.have.header(\"Content-Length\");\r",
							"    });\r",
							"\r",
							"pm.test(\">>> Content-type header contains 'application/json'\", function() \r",
							"    {\r",
							"  pm.expect(pm.response.headers.get('Content-Length')).to.contains('0');\r",
							"    }); "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\">>>>> Delete a user\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://104.209.254.152/api/customers/{{cust_id}}?ws_key=EMLX2FKDSD1C7V6UDXVBMEWBCAK7U6WK",
					"protocol": "http",
					"host": [
						"104",
						"209",
						"254",
						"152"
					],
					"path": [
						"api",
						"customers",
						"{{cust_id}}"
					],
					"query": [
						{
							"key": "ws_key",
							"value": "EMLX2FKDSD1C7V6UDXVBMEWBCAK7U6WK"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new cart",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\">>>>> Create a new cart\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"//************************************************* \r",
							"//response status testing \r",
							"//************************************************* \r",
							"\r",
							"pm.test (\">>> Status code is 201\", function()\r",
							"    {\r",
							"    pm.response.to.have.status(201);\r",
							"    });\r",
							"\r",
							"pm.test (\">>> Status code name has string 'Created'\", function()\r",
							"    {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"    });\r",
							"\r",
							"pm.test (\">>> Response is in json format\", function()\r",
							"    {\r",
							"    pm.response.to.be.json;\r",
							"    });\r",
							"pm.test (\">>> Response time is less than 600\", function()\r",
							"    {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"    });\r",
							"//************************************************* \r",
							"//response body testing\r",
							"//************************************************* \r",
							"pm.test (\">>> Response is not empty\", function()\r",
							"    {\r",
							"    pm.expect(jsonData).to.be.not.empty;\r",
							"    });\r",
							"\r",
							"pm.test (\">>> Response has type object\", function()\r",
							"    {\r",
							"        pm.expect(jsonData).to.be.a(\"object\")\r",
							"    });\r",
							"\r",
							"pm.test(\">>> Response must have properties\", () => {\r",
							"  pm.expect(jsonData.cart).to.have.property('id'),\r",
							"  pm.expect(jsonData.cart).to.have.property('id_customer'),\r",
							"  pm.expect(jsonData.cart.associations.cart_rows[0]).to.have.property('id_product'),\r",
							"  pm.expect(jsonData.cart.associations.cart_rows[0]).to.have.property('id_product_attribute'),\r",
							"  pm.expect(jsonData.cart.associations.cart_rows[0]).to.have.property('id_address_delivery'),\r",
							"  pm.expect(jsonData.cart.associations.cart_rows[0]).to.have.property('id_customization'),\r",
							"  pm.expect(jsonData.cart.associations.cart_rows[0]).to.have.property('quantity') \r",
							"});\r",
							"\r",
							"pm.test (\">>> Cart verification\", function()\r",
							"    {\r",
							"        pm.expect(jsonData.cart.associations.cart_rows[0].id_product).to.eql(\"1\")\r",
							"        pm.expect(jsonData.cart.associations.cart_rows[0].id_product_attribute).to.eql(\"1\"),\r",
							"        pm.expect(jsonData.cart.associations.cart_rows[0].id_address_delivery).to.eql(\"3\"),\r",
							"        pm.expect(jsonData.cart.associations.cart_rows[0].id_customization).to.eql(\"0\"),\r",
							"        pm.expect(jsonData.cart.associations.cart_rows[0].quantity).to.eql(\"3\")\r",
							"    }); \r",
							"   \r",
							"//*************************************************\r",
							"var cart_id= jsonData.cart.id;\r",
							"pm.collectionVariables.set(\"cart_id\", cart_id);\r",
							"console.log(\">>>>>Cart id: \" + cart_id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " <prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\r\n  <cart>\r\n    <id_currency><![CDATA[1]]></id_currency>\r\n    <id_customer><![CDATA[67]]></id_customer>\r\n    <id_lang><![CDATA[1]]></id_lang>\r\n    <associations>\r\n      <cart_rows>\r\n        <cart_row>\r\n          <id_product><![CDATA[1]]></id_product>\r\n          <id_product_attribute><![CDATA[1]]></id_product_attribute>\r\n          <id_address_delivery><![CDATA[3]]></id_address_delivery>\r\n          <id_customization><![CDATA[0]]></id_customization>\r\n          <quantity><![CDATA[3]]></quantity>\r\n        </cart_row>\r\n      </cart_rows>\r\n    </associations>\r\n  </cart>\r\n</prestashop>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "http://104.209.254.152/api/carts/?ws_key=N3GURVIGKHCY725K9YFEMESRXERVAJY6&output_format=JSON&sort=id_ASC",
					"protocol": "http",
					"host": [
						"104",
						"209",
						"254",
						"152"
					],
					"path": [
						"api",
						"carts",
						""
					],
					"query": [
						{
							"key": "ws_key",
							"value": "N3GURVIGKHCY725K9YFEMESRXERVAJY6"
						},
						{
							"key": "output_format",
							"value": "JSON"
						},
						{
							"key": "sort",
							"value": "id_ASC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an existing cart and add a new  product",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\">>>>> Update a cart\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"//************************************************* \r",
							"//response status testing \r",
							"//************************************************* \r",
							"\r",
							"pm.test (\">>> Status code is 200\", function()\r",
							"    {\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"pm.test (\">>> Status code name has string 'OK'\", function()\r",
							"    {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"    });\r",
							"\r",
							"pm.test (\">>> Response is in json format\", function()\r",
							"    {\r",
							"    pm.response.to.be.json;\r",
							"    });\r",
							"\r",
							"pm.test (\">>> Response time is less than 600\", function()\r",
							"    {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"    });\r",
							"//************************************************* \r",
							"//response body testing\r",
							"//************************************************* \r",
							"pm.test (\">>> Response is not empty\", function()\r",
							"    {\r",
							"    pm.expect(jsonData).to.be.not.empty;\r",
							"    });\r",
							"\r",
							"pm.test (\">>> Response has type object\", function()\r",
							"    {\r",
							"        pm.expect(jsonData).to.be.a(\"object\")\r",
							"    });\r",
							"\r",
							" pm.test (\">>> Cart verification (update a product)\", function()\r",
							"    {\r",
							"        pm.expect(jsonData.cart.id).to.eql(pm.collectionVariables.get(\"cart_id\")),\r",
							"        pm.expect(jsonData.cart.associations.cart_rows[0].id_product).to.eql(\"1\"),\r",
							"        pm.expect(jsonData.cart.associations.cart_rows[0].quantity).to.eql(\"1000\")\r",
							"    });    \r",
							"\r",
							" pm.test (\">>> Cart verification (add a product)\", function()\r",
							"    {\r",
							"        pm.expect(jsonData.cart.id).to.eql(pm.collectionVariables.get(\"cart_id\")),\r",
							"       pm.expect(jsonData.cart.associations.cart_rows[1].id_product).to.eql(\"21\"),\r",
							"        pm.expect(jsonData.cart.associations.cart_rows[1].quantity).to.eql(\"5\")\r",
							"    });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<prestashop xmlns:xlink=\"http://www.w3.org/1999/xlink\">\r\n  <cart>\r\n    <id><![CDATA[{{cart_id}}]]></id>\r\n    <id_currency><![CDATA[1]]></id_currency>\r\n    <id_customer><![CDATA[67]]></id_customer>\r\n    <id_lang><![CDATA[1]]></id_lang>\r\n    <associations>\r\n      <cart_rows>\r\n        <cart_row>\r\n          <id_product><![CDATA[1]]></id_product>\r\n          <id_product_attribute><![CDATA[1]]></id_product_attribute>\r\n          <id_address_delivery><![CDATA[3]]></id_address_delivery>\r\n          <id_customization><![CDATA[0]]></id_customization>\r\n          <quantity><![CDATA[1000]]></quantity>\r\n        </cart_row>\r\n        <cart_row>\r\n          <id_product><![CDATA[21]]></id_product>\r\n          <id_product_attribute><![CDATA[1]]></id_product_attribute>\r\n          <id_address_delivery><![CDATA[3]]></id_address_delivery>\r\n          <id_customization><![CDATA[0]]></id_customization>\r\n          <quantity><![CDATA[5]]></quantity>\r\n        </cart_row>\r\n      </cart_rows>\r\n    </associations>\r\n  </cart>\r\n</prestashop>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "http://104.209.254.152/api/carts/?ws_key=N3GURVIGKHCY725K9YFEMESRXERVAJY6&output_format=JSON&sort=id_ASC&cart_id={{cart_id}}",
					"protocol": "http",
					"host": [
						"104",
						"209",
						"254",
						"152"
					],
					"path": [
						"api",
						"carts",
						""
					],
					"query": [
						{
							"key": "ws_key",
							"value": "N3GURVIGKHCY725K9YFEMESRXERVAJY6"
						},
						{
							"key": "output_format",
							"value": "JSON"
						},
						{
							"key": "sort",
							"value": "id_ASC"
						},
						{
							"key": "cart_id",
							"value": "{{cart_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete an existing cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//************************************************* \r",
							"//response status testing \r",
							"//************************************************* \r",
							"\r",
							"pm.test (\">>> Status code is 200\", function()\r",
							"    {\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"pm.test (\">>> Status code name has string 'OK'\", function()\r",
							"    {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"    });\r",
							"\r",
							"pm.test (\">>> Response time is less than 600\", function()\r",
							"    {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"    });\r",
							"    \r",
							"pm.test (\">>> Response headers contain 'Content-Length' header\", function()\r",
							"    {\r",
							"    pm.expect(pm.response).to.have.header(\"Content-Length\");\r",
							"    });\r",
							"\r",
							"pm.test(\">>> Content-type header contains 'application/json'\", function() \r",
							"    {\r",
							"  pm.expect(pm.response.headers.get('Content-Length')).to.contains('0');\r",
							"    }); "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\">>>>> Delete a cart\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://104.209.254.152/api/carts/{{cart_id}}?ws_key=N3GURVIGKHCY725K9YFEMESRXERVAJY6&output_format=JSON&sort=id_ASC",
					"protocol": "http",
					"host": [
						"104",
						"209",
						"254",
						"152"
					],
					"path": [
						"api",
						"carts",
						"{{cart_id}}"
					],
					"query": [
						{
							"key": "ws_key",
							"value": "N3GURVIGKHCY725K9YFEMESRXERVAJY6"
						},
						{
							"key": "output_format",
							"value": "JSON"
						},
						{
							"key": "sort",
							"value": "id_ASC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Filter By brand",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"//************************************************* \r",
							"//response status testing \r",
							"//************************************************* \r",
							"\r",
							"pm.test(\">>> Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\">>> Status code name has string 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\">>> Response is in json format\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test (\">>> Response time is less than 600\", function()\r",
							"    {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"    });\r",
							"//************************************************* \r",
							"//response body testing\r",
							"//************************************************* \r",
							"pm.test(\">>> Response is not empty\", function () {\r",
							"    pm.expect(jsonData).to.be.not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\">>> Response has type object\", function () {\r",
							"    pm.expect(jsonData).to.be.a(\"object\")\r",
							"});\r",
							"\r",
							"pm.test(\">>> Amout of products\", function () {\r",
							"    pm.expect(jsonData.products.length).to.eql(9)\r",
							"});\r",
							"\r",
							"pm.test('>>> Products verification', () => \r",
							"    {\r",
							"         _.each(jsonData.products, (item) => \r",
							"         {\r",
							"          pm.expect(item.id).to.be.a(\"number\")\r",
							"         })\r",
							"\r",
							"        _.each(jsonData.products, (item) => \r",
							"        {\r",
							"        pm.expect(item.id).to.be.oneOf([1,2,6,7,8,9,10,11,19]);\r",
							"        })\r",
							"   });\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\">>>>> Filter by brend\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://104.209.254.152/api/products/?ws_key=319B4R11VVY17EDZL6YFDZ2XFQLEGE8D&output_format=JSON&filter[id_manufacturer]=1&sort=id_ASC",
					"protocol": "http",
					"host": [
						"104",
						"209",
						"254",
						"152"
					],
					"path": [
						"api",
						"products",
						""
					],
					"query": [
						{
							"key": "ws_key",
							"value": "319B4R11VVY17EDZL6YFDZ2XFQLEGE8D"
						},
						{
							"key": "output_format",
							"value": "JSON"
						},
						{
							"key": "filter[id_manufacturer]",
							"value": "1"
						},
						{
							"key": "sort",
							"value": "id_ASC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Filter by price",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"//************************************************* \r",
							"//response status testing \r",
							"//************************************************* \r",
							"\r",
							"pm.test(\">>> Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\">>> Status code name has string 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\">>> Response is in json format\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test (\">>> Response time is less than 600\", function()\r",
							"    {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"    });\r",
							"//************************************************* \r",
							"//response body testing\r",
							"//************************************************* \r",
							"pm.test(\">>> Response is not empty\", function () {\r",
							"    pm.expect(jsonData).to.be.not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\">>> Response has type object\", function () {\r",
							"    pm.expect(jsonData).to.be.a(\"object\")\r",
							"});\r",
							"\r",
							"pm.test(\">>> Amout of products\", function () {\r",
							"    pm.expect(jsonData.products.length).to.eql(1)\r",
							"});\r",
							"\r",
							"pm.test('>>> Products verification', () => \r",
							"    {\r",
							"    pm.expect(jsonData.products[0]).to.have.key(\"id\");\r",
							"    pm.expect(jsonData.products[0].id).to.eql(1);   \r",
							"   })\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\">>>>> Filter by price\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://104.209.254.152/api/products/?ws_key=319B4R11VVY17EDZL6YFDZ2XFQLEGE8D&output_format=JSON&filter[price]=23.900000&sort=id_ASC&=",
					"protocol": "http",
					"host": [
						"104",
						"209",
						"254",
						"152"
					],
					"path": [
						"api",
						"products",
						""
					],
					"query": [
						{
							"key": "ws_key",
							"value": "319B4R11VVY17EDZL6YFDZ2XFQLEGE8D"
						},
						{
							"key": "output_format",
							"value": "JSON"
						},
						{
							"key": "filter[price]",
							"value": "23.900000"
						},
						{
							"key": "sort",
							"value": "id_ASC"
						},
						{
							"key": "",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search by product name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"//************************************************* \r",
							"//response status testing \r",
							"//************************************************* \r",
							"\r",
							"pm.test(\">>> Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\">>> Status code name has string 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\">>> Response is in json format\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test (\">>> Response time is less than 600\", function()\r",
							"    {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"    });\r",
							"\r",
							"    \r",
							"pm.test('>>> Products verification', () => \r",
							"    {\r",
							"    pm.expect(jsonData.products[0]).to.have.key(\"id\");\r",
							"    pm.expect(jsonData.products[0].id).to.eql(22);   \r",
							"   })\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\">>>>> Search by product name\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://104.209.254.152/api/products/?ws_key=319B4R11VVY17EDZL6YFDZ2XFQLEGE8D&output_format=JSON&filter[name]=Jacket&sort=id_ASC",
					"protocol": "http",
					"host": [
						"104",
						"209",
						"254",
						"152"
					],
					"path": [
						"api",
						"products",
						""
					],
					"query": [
						{
							"key": "ws_key",
							"value": "319B4R11VVY17EDZL6YFDZ2XFQLEGE8D"
						},
						{
							"key": "output_format",
							"value": "JSON"
						},
						{
							"key": "filter[name]",
							"value": "Jacket"
						},
						{
							"key": "sort",
							"value": "id_ASC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Filter by category men",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\">>>>> Filter by gender (men)\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"//************************************************* \r",
							"//response status testing \r",
							"//************************************************* \r",
							"\r",
							"pm.test (\">>> Status code is 200\", function()\r",
							"    {\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"pm.test (\">>> Status code name has string 'OK'\", function()\r",
							"    {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"    });\r",
							"\r",
							"pm.test (\">>> Response is in json format\", function()\r",
							"    {\r",
							"    pm.response.to.be.json;\r",
							"    });\r",
							"pm.test (\">>> Response time is less than 500\", function()\r",
							"    {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"    });\r",
							"//************************************************* \r",
							"//response body testing\r",
							"//************************************************* \r",
							"pm.test (\">>> Response is not empty\", function()\r",
							"    {\r",
							"    pm.expect(jsonData).to.be.not.empty;\r",
							"    });\r",
							"\r",
							"pm.test (\">>> Response has type object\", function()\r",
							"    {\r",
							"        pm.expect(jsonData).to.be.a(\"object\")\r",
							"    });\r",
							"\r",
							"pm.test (\">>> Response has type object\", function()\r",
							"    {\r",
							"        pm.expect(jsonData.category.associations.products.length).to.eql(3)\r",
							"    });\r",
							"\r",
							"pm.test('>>> Products verification', () => \r",
							"    {\r",
							"         _.each(jsonData.category.associations.products, (item) => \r",
							"         {\r",
							"          pm.expect(item.id).to.be.not.a(\"number\"),\r",
							"          pm.expect(Number(item.id)).to.be.oneOf([1,22,23]),\r",
							"          console.log(\"Item id is: \" + item.id)\r",
							"         })\r",
							"    })"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://104.209.254.152/api/categories/4/?ws_key=UDUFEDTTKQXMN79WKY6QWFP48L9BMZM4&output_format=JSON",
					"protocol": "http",
					"host": [
						"104",
						"209",
						"254",
						"152"
					],
					"path": [
						"api",
						"categories",
						"4",
						""
					],
					"query": [
						{
							"key": "ws_key",
							"value": "UDUFEDTTKQXMN79WKY6QWFP48L9BMZM4"
						},
						{
							"key": "output_format",
							"value": "JSON"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Filter by category women",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\">>>>> Filter by gender (men)\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"//************************************************* \r",
							"//response status testing \r",
							"//************************************************* \r",
							"\r",
							"pm.test (\">>> Status code is 200\", function()\r",
							"    {\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"pm.test (\">>> Status code name has string 'OK'\", function()\r",
							"    {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"    });\r",
							"\r",
							"pm.test (\">>> Response is in json format\", function()\r",
							"    {\r",
							"    pm.response.to.be.json;\r",
							"    });\r",
							"\r",
							" pm.test (\">>> Response time is less than 600\", function()\r",
							"    {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"    });   \r",
							"\r",
							"//************************************************* \r",
							"//response body testing\r",
							"//************************************************* \r",
							"pm.test (\">>> Response is not empty\", function()\r",
							"    {\r",
							"    pm.expect(jsonData).to.be.not.empty;\r",
							"    });\r",
							"\r",
							"pm.test (\">>> Response has type object\", function()\r",
							"    {\r",
							"        pm.expect(jsonData).to.be.a(\"object\")\r",
							"    });\r",
							"\r",
							"pm.test (\">>> Response has type object\", function()\r",
							"    {\r",
							"        pm.expect(jsonData.category.associations.products.length).to.eql(2)\r",
							"    });\r",
							"\r",
							"pm.test('>>> Products verification', () => \r",
							"    {\r",
							"         _.each(jsonData.category.associations.products, (item) => \r",
							"         {\r",
							"          pm.expect(item.id).to.be.not.a(\"number\"),\r",
							"          pm.expect(Number(item.id)).to.be.oneOf([2,23]),\r",
							"          console.log(\"Item id is: \" + item.id)\r",
							"         })\r",
							"    })"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://104.209.254.152/api/categories/5/?ws_key=UDUFEDTTKQXMN79WKY6QWFP48L9BMZM4&output_format=JSON",
					"protocol": "http",
					"host": [
						"104",
						"209",
						"254",
						"152"
					],
					"path": [
						"api",
						"categories",
						"5",
						""
					],
					"query": [
						{
							"key": "ws_key",
							"value": "UDUFEDTTKQXMN79WKY6QWFP48L9BMZM4"
						},
						{
							"key": "output_format",
							"value": "JSON"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get amount of products in white colour",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							" pm.test('>>> Products verification', () => \r",
							"    {\r",
							"        var i =0;\r",
							"         _.each(jsonData.products, (item) => \r",
							"         {\r",
							"                _.each(item.associations.product_option_values, (item1) =>{\r",
							"                        if ((Number(item1.id)===8))\r",
							"                        {   i=i+1;\r",
							"                            console.log(\"Product id is: \" + item.id);\r",
							"                            pm.expect(item.id).to.be.oneOf([1,9,10,11]);\r",
							"                        }\r",
							"                })              \r",
							"         })\r",
							"         console.log(\"Number of products \" + i);\r",
							"         pm.expect(i).to.eql(4)\r",
							"    })       \r",
							"              "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\">>>>> Get amount of products in white colour\");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://104.209.254.152/api/products/?ws_key=319B4R11VVY17EDZL6YFDZ2XFQLEGE8D&output_format=JSON&display=full&sort=id_ASC",
					"protocol": "http",
					"host": [
						"104",
						"209",
						"254",
						"152"
					],
					"path": [
						"api",
						"products",
						""
					],
					"query": [
						{
							"key": "ws_key",
							"value": "319B4R11VVY17EDZL6YFDZ2XFQLEGE8D"
						},
						{
							"key": "output_format",
							"value": "JSON"
						},
						{
							"key": "display",
							"value": "full"
						},
						{
							"key": "sort",
							"value": "id_ASC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get amount of products with dimension 40x60cm",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							" pm.test('>>> Products verification', () => \r",
							"    {\r",
							"        var i =0;\r",
							"         _.each(jsonData.products, (item) => \r",
							"         {\r",
							"                _.each(item.associations.product_option_values, (item1) =>{\r",
							"                        if ((Number(item1.id)===19))\r",
							"                        {   i=i+1;\r",
							"                            console.log(\"Product id is: \" + item.id);\r",
							"                            pm.expect(item.id).to.be.oneOf([3,4,5]);\r",
							"                        }\r",
							"                })              \r",
							"         })\r",
							"         console.log(\"Number of products \" + i);\r",
							"         pm.expect(i).to.eql(3)\r",
							"    })       \r",
							"              "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\">>>>> Get amount of products with dimension 40x60cm\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://104.209.254.152/api/products/?ws_key=319B4R11VVY17EDZL6YFDZ2XFQLEGE8D&output_format=JSON&display=full&sort=id_ASC",
					"protocol": "http",
					"host": [
						"104",
						"209",
						"254",
						"152"
					],
					"path": [
						"api",
						"products",
						""
					],
					"query": [
						{
							"key": "ws_key",
							"value": "319B4R11VVY17EDZL6YFDZ2XFQLEGE8D"
						},
						{
							"key": "output_format",
							"value": "JSON"
						},
						{
							"key": "display",
							"value": "full"
						},
						{
							"key": "sort",
							"value": "id_ASC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get amount of products with property 'Long sleeves'",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							" pm.test('>>> Products verification', () => \r",
							"    {\r",
							"        var i =0;\r",
							"         _.each(jsonData.products, (item) => \r",
							"         {\r",
							"            _.each(item.associations.product_features, (item1) =>{\r",
							"                        if ((Number(item1.id_feature_value)===7))\r",
							"                        {   i=i+1;\r",
							"                            console.log(\"Product id is: \" + item.id);\r",
							"                            pm.expect(item.id).to.be.oneOf([2,22,23]);   \r",
							"                        }\r",
							"                })              \r",
							"         })\r",
							"         console.log(\"Number of products \" + i);\r",
							"         pm.expect(i).to.eql(3)\r",
							"    })       \r",
							"              "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\">>>>> Get amount of products with property 'Long sleeves'\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://104.209.254.152/api/products/?ws_key=319B4R11VVY17EDZL6YFDZ2XFQLEGE8D&output_format=JSON&display=full&sort=id_ASC",
					"protocol": "http",
					"host": [
						"104",
						"209",
						"254",
						"152"
					],
					"path": [
						"api",
						"products",
						""
					],
					"query": [
						{
							"key": "ws_key",
							"value": "319B4R11VVY17EDZL6YFDZ2XFQLEGE8D"
						},
						{
							"key": "output_format",
							"value": "JSON"
						},
						{
							"key": "display",
							"value": "full"
						},
						{
							"key": "sort",
							"value": "id_ASC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get amount of products in size \"S\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							" pm.test('>>> Products verification', () => \r",
							"    {\r",
							"        var i =0;\r",
							"         _.each(jsonData.products, (item) => \r",
							"         {\r",
							"                _.each(item.associations.product_option_values, (item1) =>{\r",
							"                        if ((Number(item1.id)===1))\r",
							"                        {   i=i+1;\r",
							"                            console.log(\"Product id is: \" + item.id);\r",
							"                            pm.expect(item.id).to.be.oneOf([1,2]);\r",
							"                        }\r",
							"                })              \r",
							"         })\r",
							"         console.log(\"Number of products \" + i);\r",
							"         pm.expect(i).to.eql(2)\r",
							"    })       \r",
							"              "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\">>>>> Get amount of products in size S \");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://104.209.254.152/api/products/?ws_key=319B4R11VVY17EDZL6YFDZ2XFQLEGE8D&output_format=JSON&display=full&sort=id_ASC",
					"protocol": "http",
					"host": [
						"104",
						"209",
						"254",
						"152"
					],
					"path": [
						"api",
						"products",
						""
					],
					"query": [
						{
							"key": "ws_key",
							"value": "319B4R11VVY17EDZL6YFDZ2XFQLEGE8D"
						},
						{
							"key": "output_format",
							"value": "JSON"
						},
						{
							"key": "display",
							"value": "full"
						},
						{
							"key": "sort",
							"value": "id_ASC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get amount of products with parer type Ruled",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							" pm.test('>>> Products verification', () => \r",
							"    {\r",
							"        var i =0;\r",
							"         _.each(jsonData.products, (item) => \r",
							"         {\r",
							"                _.each(item.associations.product_option_values, (item1) =>{\r",
							"                        if ((Number(item1.id)===22))\r",
							"                        {   i=i+1;\r",
							"                            console.log(\"Product id is: \" + item.id);\r",
							"                            pm.expect(item.id).to.be.oneOf([16,17,18]);\r",
							"                        }\r",
							"                })              \r",
							"         })\r",
							"         console.log(\"Number of products \" + i);\r",
							"         pm.expect(i).to.eql(3)\r",
							"    })       "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\">>>>> Get amount of products with parer type Ruled\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://104.209.254.152/api/products/?ws_key=319B4R11VVY17EDZL6YFDZ2XFQLEGE8D&output_format=JSON&display=full&sort=id_ASC",
					"protocol": "http",
					"host": [
						"104",
						"209",
						"254",
						"152"
					],
					"path": [
						"api",
						"products",
						""
					],
					"query": [
						{
							"key": "ws_key",
							"value": "319B4R11VVY17EDZL6YFDZ2XFQLEGE8D"
						},
						{
							"key": "output_format",
							"value": "JSON"
						},
						{
							"key": "display",
							"value": "full"
						},
						{
							"key": "sort",
							"value": "id_ASC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get amount of products in Ceramic composition",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							" pm.test('>>> Products verification', () => \r",
							"    {\r",
							"        var i =0;\r",
							"         _.each(jsonData.products, (item) => \r",
							"         {\r",
							"                _.each(item.associations.product_features, (item1) =>{\r",
							"                        if ((Number(item1.id_feature_value)===3))\r",
							"                        {   i=i+1;\r",
							"                            console.log(\"Product id is: \" + item.id);\r",
							"                            pm.expect(item.id).to.be.oneOf([6,7,8,19]);\r",
							"                        }\r",
							"                })              \r",
							"         })\r",
							"         console.log(\"Number of products \" + i);\r",
							"         pm.expect(i).to.eql(4)\r",
							"    })       \r",
							"              "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\">>>>> Get amount of products in Ceramic composition\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://104.209.254.152/api/products/?ws_key=319B4R11VVY17EDZL6YFDZ2XFQLEGE8D&output_format=JSON&display=full&sort=id_ASC",
					"protocol": "http",
					"host": [
						"104",
						"209",
						"254",
						"152"
					],
					"path": [
						"api",
						"products",
						""
					],
					"query": [
						{
							"key": "ws_key",
							"value": "319B4R11VVY17EDZL6YFDZ2XFQLEGE8D"
						},
						{
							"key": "output_format",
							"value": "JSON"
						},
						{
							"key": "display",
							"value": "full"
						},
						{
							"key": "sort",
							"value": "id_ASC"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "id",
			"value": ""
		},
		{
			"key": "cust_id",
			"value": ""
		},
		{
			"key": "cart_id",
			"value": ""
		}
	]
}